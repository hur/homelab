#!/usr/bin/env python

"""
Quick and dirty script for things that I can't/don't have time to do properly yet
TODO: retire this script
"""

import base64
import json
import requests
import sys
import urllib

from requests.auth import HTTPBasicAuth
from rich.console import Console
from kubernetes import client, config

# https://git.khuedoan.com/user/settings/applications
# Doing this properly inside the cluster requires:
# - Kubernetes service account
# - Vault Kubernetes auth
config.load_kube_config(config_file='./metal/kubeconfig.yaml')

gitea_host = client.NetworkingV1Api().read_namespaced_ingress('gitea', 'gitea').spec.rules[0].host
gitea_user = base64.b64decode(client.CoreV1Api().read_namespaced_secret('gitea-admin-secret', 'gitea').data['username']).decode("utf-8")
gitea_pass = base64.b64decode(client.CoreV1Api().read_namespaced_secret('gitea-admin-secret', 'gitea').data['password']).decode("utf-8")
gitea_url = f"http://{gitea_user}:{urllib.parse.quote_plus(gitea_pass)}@{gitea_host}"

vault_host = client.NetworkingV1Api().read_namespaced_ingress('vault', 'vault').spec.rules[0].host
vault_token = base64.b64decode(client.CoreV1Api().read_namespaced_secret('vault-unseal-keys', 'vault').data['vault-root']).decode("utf-8")
vault_url = f"https://{vault_host}"

harbor_host = client.NetworkingV1Api().read_namespaced_ingress('harbor-ingress', 'harbor').spec.rules[0].host
harbor_pass = base64.b64decode(client.CoreV1Api().read_namespaced_secret('harbor-secrets', 'harbor').data['HARBOR_ADMIN_PASSWORD']).decode("utf-8")
harbor_url = f"https://{harbor_host}"

def create_vault_secret(path: str, data) -> None:
    requests.post(
        url=f"{vault_url}/v1/secret/data/{path}",
        headers={
            'X-Vault-Token': vault_token
        },
        data=json.dumps({
            'data': data
        })
    )


def setup_gitea_access_token(name: str) -> None:
    current_tokens = requests.get(
        url=f"{gitea_url}/api/v1/users/{gitea_user}/tokens",
    ).json()

    if not any(token['name'] == name for token in current_tokens):
        resp = requests.post(
            url=f"{gitea_url}/api/v1/users/{gitea_user}/tokens",
            headers={
                'Content-Type': 'application/json'
            },
            data=json.dumps({
                'name': name
            })
        )

        if resp.status_code == 201:
            create_vault_secret(
                f"gitea/{name}",
                {
                    'token': resp.json()['sha1']
                }
            )
        else:
            print(f"Error creating access token {name} ({resp.status_code})")
            print(resp.content)
            sys.exit(1)


def setup_gitea_oauth_app(name: str, redirect_uri: str, is_confidential: str = True) -> None:
    current_apps = requests.get(
        url=f"{gitea_url}/api/v1/user/applications/oauth2",
    ).json()

    if not any(app['name'] == name for app in current_apps):
        resp = requests.post(
            url=f"{gitea_url}/api/v1/user/applications/oauth2",
            headers={
                'Content-Type': 'application/json'
            },
            data=json.dumps({
                'name': name,
                'redirect_uris': [redirect_uri],
                'confidential_client': is_confidential
            })
        )

        if resp.status_code == 201:
            create_vault_secret(
                f"gitea/{name}",
                {
                    'client_id': resp.json()['client_id'],
                    'client_secret': resp.json()['client_secret']
                }
            )
        else:
            print(f"Error creating OAuth application {name} ({resp.status_code})")
            print(resp.content)
            sys.exit(1)


def setup_harbor_robot_account(name: str) -> None:
    resp = requests.get(
        url=f"{harbor_url}/api/v2.0/robots?q=" + requests.utils.quote(f"exact match(name=robot${name})"),
        auth=HTTPBasicAuth('admin', harbor_pass)
    )

    if resp.status_code != 200:
        print(f"Error checking for existing Harbor robot account for Tekton ({resp.status_code})")
        print(resp.content)
        sys.exit(1)
    robots = resp.json()
    if not any(robot['name'] == f"robot${name}" for robot in robots):
        # create robot account for tekton
        resp = requests.post(
            url=f"{harbor_url}/api/v2.0/robots",
            headers={
                'Content-Type': 'application/json'
            },
            auth=HTTPBasicAuth('admin', harbor_pass),
            data=json.dumps({
                "name": name,
                "duration": -1,  # no expiry
                "description": "Robot account for tekton pipelines",
                "disable": False,
                "level": "system",
                "permissions": [
                    {
                    "namespace": "*",  # TODO: finer grained permissions
                    "kind": "project",
                    "access": [
                        {"resource": "repository", "action": "list"},
                        {"resource": "repository", "action": "pull"},
                        {"resource": "repository","action": "push"},
                        {"resource": "repository","action": "delete"},
                        {"resource": "artifact","action": "read"},
                        {"resource": "artifact","action": "list"},
                        {"resource": "artifact","action": "delete"},
                        {"resource": "artifact-label","action": "create"},
                        {"resource": "artifact-label","action": "delete"},
                        {"resource": "tag","action": "create"},
                        {"resource": "tag","action": "delete"},
                        {"resource": "tag","action": "list"},
                        {"resource": "scan","action": "create"},
                        {"resource": "scan","action": "stop"},
                        {"resource": "helm-chart","action": "read"},
                        {"resource": "helm-chart-version","action": "create"},
                        {"resource": "helm-chart-version","action": "delete"},
                        {"resource": "helm-chart-version-label","action": "create"},
                        {"resource": "helm-chart-version-label","action": "delete"}
                    ]
                    }
                ]
                })
        )
        if resp.status_code == 201:
            create_vault_secret(
                f"harbor/tekton-robot-account",
                {
                    'name': resp.json()['name'],
                    'secret': resp.json()['secret']
                }
            )
        else:
            print(f"Error creating Harbor robot account for Tekton ({resp.status_code})")
            print(resp.content)
            sys.exit(1)


def main() -> None:

    with Console().status("Completing the remaining sorcery"):
        gitea_access_tokens = [
            'renovate',
            'concourse'
        ]

        gitea_oauth_apps = [
            {'name': 'dex', 'redirect_uri': f"https://{client.NetworkingV1Api().read_namespaced_ingress('dex', 'dex').spec.rules[0].host}/callback"}
        ]

        for token_name in gitea_access_tokens:
            setup_gitea_access_token(token_name)

        for app in gitea_oauth_apps:
            setup_gitea_oauth_app(app['name'], app['redirect_uri'])

        setup_harbor_robot_account('tekton')


if __name__ == '__main__':
    main()
